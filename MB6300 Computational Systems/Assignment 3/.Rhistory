lowerRandomLettersHi[1, , drop = FALSE]
lowerRandomLettersHi["hi", , drop = FALSE]
lowerRandomLettersHi[, , drop = FALSE]
lowerRandomLettersHi[,"hi" , drop = FALSE]
lowerRandomLettersHi[seq("hi")]
bottom5 <- tail(sort(ordered), 5)
top5 <- head(sort(ordered), 5)
ordered <-resSig["log2FoldChange"]
bottom5 <- tail(sort(ordered), 5)
top5 <- head(sort(ordered), 5)
merged <- list(bottom5, top5)
View(merged)
pData(merged)
pData(top5)
View(ordered)
grep("hi", lowerRandomLettersHi)
?grep
grepl("hi", lowerRandomLettersHi)
grepl("hi", lowerRandomLettersHi, value=TRUW)
grepl("hi", lowerRandomLettersHi, value=TRUE)
grepl("hi", lowerRandomLettersHi, value=FALSE)
grepl("hi",value=FALSE, lowerRandomLettersHi)
gsub("hi", lowerRandomLettersHi)
grep("hi", lowerRandomLettersHi)
grep("hi", lowerRandomLettersHi, fixed = TRUW)
grep("hi", lowerRandomLettersHi, fixed = TRUE)
grep("hi", lowerRandomLettersHi, fixed = FALSE)
grep("hi", lowerRandomLettersHi, value = FALSE)
grep("hi", lowerRandomLettersHi, value = TRUE)
extractHi
totalCount<- length(grep("hi", lowerRandomLettersHi))
extractHi <- grep("hi", lowerRandomLettersHi, value = TRUE)
extractHi
strsplit(paste(extractHi, collapse=', '), ' ')[[1]]
strsplit(paste(extractHi, collapse='_ '), ' ')[[1]]
for i in extractHi {
strsplit(paste(extractHi, collapse='_',i), ' ')[[1]]
}
strsplit(paste(extractHi, collapse='_'), ' ')[[1]]
print i
for i in extractHi {
print i
}
print (i)
print ([i])
print (i)
for (i in 1:2003) {
print(i)
}
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_', i), ' ')[[1]]
}
hi
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_'), i)[[1]]
}
hi
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_'i), ' ')
}
for (i in 1:2003)
hi <- strsplit(paste(extractHi, collapse='_'i), ' ')
hi <- strsplit(paste(extractHi, collapse='_', i), ' ')
View(hi)
hi <- strsplit(paste(extractHi, collapse='_', i), ' ') [1]
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_', i), ' ') [1]
}
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_', i), ' ') [1]
}
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_'), ' ',i) [1]
}
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_' i), ' ') [1]
}
for (i in 1:2003) {
hi <- strsplit(paste(extractHi, collapse='_'), ' ') [1]
}
View(hi)
hi <- strsplit(paste(extractHi,"_",i,sep = ""), ' ') [1]
for (i in 1:2003) {
hi <- strsplit(paste(extractHi,"_",i,sep = ""), ' ') [1]
}
View(hi)
strsplit(paste(extractHi, collapse='_ '), ' ')[[1]]
strsplit(paste(extractHi, collapse='_ ', 1:2003), ' ')[[1]]
strsplit(paste(extractHi, collapse='_ 1:2003'), ' ')[[1]]
strsplit(paste(extractHi,'_',), ' ')[[1]]
strsplit(paste(extractHi, collapse='_'), ' ')[[1]]
strsplit(paste(extractHi, collapse='_ ', 1:2003), ' ')[[1]]
strsplit(paste(extractHi, collapse='_ '), ' ')[[1]]
strsplit(paste(1:2003,extractHi, collapse='_ '), ' ')[[1]]
extractHi[] <- lapply(extractHi, function(x) paste("Market", x, sep="_"))
extractHi[] <- lapply(extractHi, function(x) paste x, sep="", "_"))
library("pheatmap")
select <- rownames(merged)
resOrdered = res[order(res$pvalue),]
resSig = subset(resOrdered, padj<0.05)
summary(res,alpha=0.05)
select <- rownames(resSig)
select
library("pheatmap")
select1 <- rownames(merged)
select1
bottom5 <- tail(resSig, n=5)
top5 <- head(resSig, n=5)
merged <- list(bottom5, top5)
View(merged)
library("pheatmap")
select1 <- rownames(merged)
selecy1
resOrdered1 = res[order(res$log2FoldChange),]
bottom5 <- tail(resOrdered1, n=5)
top5 <- head(resOrdered1, n=5)
merged <- list(bottom5, top5)
library("pheatmap")
select1 <- rownames(merged)
selecy1
select1 <- rownames(merged@rownames)
library("pheatmap")
?sample
#C
sample(1:100, 50, TRUE)
#C
sample(1:100, 20, TRUE)
#C
sample(1:100, 20, 50, TRUE)
#C
sample(1:100, 20, size =50, TRUE)
#C
sample(1:100, 20, size=50, TRUE)
#C
sample(1:100, n=20, size=50, TRUE)
#C
sample(1:100, size=50, TRUE)
#C
sample(1:100, size=20, TRUE)
#C
sample(1:100, size=20, n=50 TRUE)
#C
sample(1:100, size=20, n=50, FALSE)
#C
sample(1:100, size=20, n=50, TRUE)
#C
sample.int(1:100, size=20, n=50, TRUE)
#C
sample.int(1:100, size=20, n=50, replace=TRUE)
#C
sample.int(1:100, size=50, n=20, replace=TRUE)
20
20
20
20
#C
for i in 20 {
sample(1:100, 20, TRUE)
i++
}
sample(1:100, 50, TRUE)
#C
for i in 20 {
sample(1:100, 50, TRUE)
}
#C
for i in 20 {
sample(1:100, 50, TRUE)
}
sample(1:100, size =50, TRUE)
randomVector <- list(data = NA, ncol = c)
View(randomVector)
c <- 20
randomVector <- list(data = NA, ncol = c)
View(randomVector)
for (i in 1:c) {
randomVector[i,] <- sample(1:100, 50, TRUE)
}
randomVector[i] <- sample(1:100, 50, TRUE)
c <- 20
randomVector <- list(data = NA, ncol = c)
for (i in 1:c) {
randomVector[i] <- sample(1:100, 50, TRUE)
}
View(randomVector)
c <- 20
randomVector <- list()
for (i in 1:c) {
randomVector[i] <- sample(1:100, 50, TRUE)
}
randomVector
randomVector <- sample(1:100, 50, TRUE)
for (i in 1:c) {
randomVector <- sample(1:100, 50, TRUE)
}
randomVector
randomVector[i,]<- sample(1:100, 50, TRUE)
randomVector[,i]<- sample(1:100, 50, TRUE)
randomVector[[i]]<- sample(1:100, 50, TRUE)
randomVector <- list()
for (i in 1:c) {
randomVector[[i]]<- sample(1:100, 50, TRUE)
}
randomVector <- list()
randomVector
c <- 20
randomVector <- list()
for (i in 1:c) {
randomVector[[i]]<- sample(1:100, 50, TRUE)
}
randomVector
lapply(randomVector, mean)
#C
c <- 20
randomVector <- list()
for (i in 1:c) {
randomVector[[i]]<- sample(1:100, 50, TRUE)
lapply(randomVector, mean)
}
randomVector
lapply(randomVector, mean)
#C
c <- 20
randomVector <- list()
for (i in 1:c) {
randomVector[[i]]<- sample(1:100, 50, TRUE)
}
lapply(randomVector, mean)
sapply(randomVector, mean)
n1 <- sapply(randomVector, mean)
paste0("mean_", n1, sep="")
mean1 <- sapply(randomVector, mean)
updated_mean <- paste0("mean_", mean1, sep="")
mapply(c, randomVector,updated_mean, SIMPLIFY = FALSE)
map(c, randomVector, updated_mean, SIMPLIFY = FALSE)
mapply(c, randomVector,updated_mean, SIMPLIFY = FALSE)
mapply(FUN, randomVector,updated_mean, SIMPLIFY = FALSE)
mapply(list, randomVector,updated_mean)
mapply(list, updated_mean)
mapply(list, updated_mean, randomVector)
map(list, updated_mean, randomVector)
merge(merge(updated_mean,randomVector),df3)
merge()
merge(updated_mean,randomVector)
rownames(randomVector)<-updated_mean
names(randomVector)<-updated_mean
randomVector
summary(randomVector)
unlist(randomVector)
summary(test)
test <- unlist(randomVector)
summary(test)
summary(test)
summary(randomVector)
randomVector
extractHi
extractHi <- grep("hi", lowerRandomLettersHi, value = TRUE)
extractHi
updated_num <- paste0("_", 1:2003, sep="")
merge(extractHi,updated_num)
dim(rbind(randomVector,updated_mean))
dim(rbind(extractHi,updated_num))
updated_num
dim(cbind(extractHi,updated_num))
cbind(extractHi,updated_num)
rbind(extractHi,updated_num)
bind(extractHi,updated_num)
Matrix_x <- matrix(unlist(randomVector), ncol = 50, byrow = TRUE)
Matrix_x
Matrix_x <- matrix(unlist(randomVector), ncol = 51, byrow = TRUE)
Matrix_x <- matrix(unlist(randomVector), ncol = 59, byrow = TRUE)
Matrix_x <- matrix(unlist(randomVector), ncol = 50, byrow = TRUE)
rownames(Matrix_x)<-updated_mean
Matrix_x
summary(Matrix_x)
c <- 20
randomVector <- list()
for (i in 1:c) {
randomVector[[i]]<- sample(1:100, 50, TRUE)
}
mean1 <- sapply(randomVector, mean)
updated_mean <- paste0("mean_", mean1, sep="")
names(randomVector)<-updated_mean
randomVector
paste(extractHi,updated_num)
paste(extractHi,updated_num, sep = "")
#D
x=c()
x[1] = 3
for (i in 2:9) {
x[i]=2*x[i-1]
}
x
print[i]
print(i)
while (i<10000) {
print(i)
}
while (i<10000) {
print(i)
}
while (i<10000) {
print(sample(1:10000, replace=FALSE))
}
while (i<10000) {
x5 <- sample(1:40, 6, replace=F)
}
while (i<10000) {
x5 <- sample(1:40, 6, replace=F)
}
odd <- seq(1,by=2, len=100)
#D
while (i < 10) {
if (i %% 2 ==1) print(i)
}
#D
while (i < 10) {
if (i %% 2 ==1) print(i)
i= i+1
}
i= i-1
#D
while (i < 10) {
if (i %% 2 ==1) print(i)
i= i-1
}
#D
while (i < 1000) {
if (i %% 2 ==1) print(i)
i= i+1
}
#D
i=0
while (i < 10000) {
if (i %% 2 ==1) print(i)
i= i+1
}
#D
i=0
while (i < 10000) {
if (i %% 2 ==1) print(i)
i= i+1
}
#D
vector[]
i=0
while (i < 10000) {
if (i %% 2 ==1) print(i)
vector <- c(vector, i)
i= i+1
}
View(vector)
if (i %% 2 ==1)  vector <- c(vector, i)
i= i+1
#D
vector
i=0
while (i < 10000) {
if (i %% 2 ==1)  vector <- c(vector, i)
i= i+1
}
#D
vector
i=0
while (i < 10000) {
if (i %% 2 ==1)
{vector <- c(vector, i)}
i= i+1
}
#D
vector = 0
i=0
while (i < 10000) {
if (i %% 2 ==1)
{vector <- c(vector, i)}
i= i+1
}
vector
match(c(9855), vector)
match(c(9855), vector)
replace(vector, x==9, 8)
replace(vector, vector==9, 8)
vector[-1]
vector <- vector[-1]
#D
vector = 0
i=0
while (i < 10000) {
if (i %% 2 ==1)
{vector <- c(vector, i)}
i= i+1
}
vector <- vector[-1]
match(c(9855), vector)
gsub("9", "8", vector)
new_vector <- gsub("9", "8", vector)
x <- 1:10000
x <- 1:10000
x <- 1:10000
i <- 1
odd <- vector()
while(i <= length(x))
{
if(i %% 2 == 1)
{
append(odd,i)
}
}
x <- 1:10000
i <- 1
odd <- vector()
while(i <= length(x))
{
if(i %% 2 == 1)
{
c(odd,i)
}
}
while(i <= length(x))
{
if(i %% 2 == 1)
{
c(odd,i)
}
i=i+1
}
x <- 1:10000
i <- 1
odd <- vector()
while(i <= length(x))
{
if(i %% 2 == 1)
{
odd <- c(odd,i)
}
i=i+1
}
x <- 1:10000
i <- 1
odd <- vector()
while(i <= length(x))
{
if(i %% 2 == 1)
{
odd <- append(odd,i)
}
i=i+1
}
merged <- rbind(bottom5, top5)
View(merged)
bottom5 <- tail(resSig, n=5)
top5 <- head(res, n=5)
merged <- rbind(bottom5, top5)
View(merged)
merged1 <- rownames(merged)
rlog1 <- rlog(dds, blind = F)
dataframe <- as.data.frame(colData(ddsQ2)[,c("condition")])
colnames(df) = "condition"
heatmap(assay(rld)[merged1,])
merged1 <- rownames(merged)
rlog1 <- rlog(dds, blind = F)
dataframe <- as.data.frame(colData(dds)[,c("condition")])
colnames(df) = "condition"
heatmap(assay(rld)[merged1,])
View(dataframe)
lowerRandomLetters <- tolower(randomLetters)
lowerRandomLettersHi <- sub("h","hi",lowerRandomLetters)
columnsCount <- colCounts(lowerRandomLettersHi, value = "hi", dim. = dim(lowerRandomLettersHi))
totalCount<- length(grep("hi", lowerRandomLettersHi))
extractHi <- grep("hi", lowerRandomLettersHi, value = TRUE)
updated_num <- paste0("_", 1:2003, sep="")
paste(extractHi,updated_num, sep = "")
lowerRandomLetters <- tolower(randomLetters)
lowerRandomLettersHi <- sub("h","hi",lowerRandomLetters)
columnsCount <- colCounts(lowerRandomLettersHi, value = "hi", dim. = dim(lowerRandomLettersHi))
totalCount<- length(grep("hi", lowerRandomLettersHi))
extractHi <- grep("hi", lowerRandomLettersHi, value = TRUE)
nums <- 1:2003
updated_num <- paste0("_", nums, sep="")
paste(extractHi,updated_num, sep = "")
columnsCount
res<-results(dds)
res <- results(dds)
dds <- DESeq(dds)
res <- results(dds)
resOrdered = res[order(res$log2FoldChange),]
resSig = subset(resOrdered, padj<0.05)
bottom5 <- tail(resSig, n=5)
top5 <- head(res, n=5)
merged <- rbind(bottom5, top5)
library("pheatmap")
merged1 <- rownames(merged)
rlog1 <- rlog(dds, blind = F)
dataframe <- as.data.frame(colData(dds)[,c("condition")])
colnames(df) = "condition"
heatmap(assay(rld)[merged1,])
heatmap(assay(rlog1)[merged1,])
resOrdered1 = res[order(res$lfcSE),]
resSig1 = subset(resOrdered1, padj<0.05)
top10 <- head(resSig2,n=10)
top10 <- head(resSig1,n=10)
sd_top10 <- rownames(top10)
rlog2 <- rlog(dds, blind = F)
dataframe1 <- as.data.frame(colData(dds)[,c("condition")])
colnames(dataframe1) = "condition"
heatmap(assay(rld)[sd_top10,])
heatmap(assay(rlog2)[sd_top10,])
mart <- useMart(dataset="merged",biomart='ensembl')
library(biomaRt)
mart <- useMart(dataset="merged",biomart='ensembl')
?results
boxplot(merged)
